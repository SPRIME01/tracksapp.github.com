---
layout: post
date: 2005-07-09 
author: bsag 
title: "Starting Tracks at login with Mac OS X Tiger" 
categories: [articles] 
comments: true
sharing: true
footer: true
---

Several people have asked me if there's a way to start up Tracks on your own machine when it boots or when you login. The answer if you're using Mac OS X Tiger is yes -- there's an easy way.

*NOTE:* There's now a "better way":http://getontracks.org/articles/comments/a-better-startup-item-for-mac-os-x-tiger to do this, which only involves one file.
 

Tiger comes with a new system for starting, stopping and monitoring processes called <code>launchd</code>. I found the discussions on "MacOSXHints":http://www.macosxhints.com/article.php?story=20050517210406483 and "Mac Geekery":http://www.macgeekery.com/tips/all_about_launchd_items_and_how_to_make_one_yourself very useful when I was putting this together, and both are well worth reading if you want to find out more about the capabilities for <code>launchd</code>. However, I thought I'd save you a bit of hassle by putting the files together myself. 

* Download the files "here":http://www.rousette.org.uk/blog/projects/startup_items_for_tracks.zip and unzip the package. You'll find two files inside: <code>com.rousette.tracks.plist</code> and <code>start_tracks</code>. 
* You need to edit both (using a text editor) and replace 'YOURUSERNAME' with your real user name. Unless your actual user name is 'YOURUSERNAME' -- some people have a funny sense of humour. You might also want to change the port in <code>start_tracks</code> from the default 3030 if you have another app running on that port.
* Put the <code>start_tracks</code> file in <code>~/Library/Scripts/Applications/launchd</code>, making the folders if necessary.
* Make sure <code>start_tracks</code> is executable by issuing this command in the Terminal:
<pre>
<code>
cd ~/Library/Scripts/Applications/launchd
chmod +x start_tracks
</code>
</pre>
* Put the file <code>com.rousette.tracks.plist</code> in <code>~/Library/LaunchAgents</code>, again, making the folders if necessary.


When you next log in, the WEBrick server should start automatically. If you want to start it manually now, run:

<pre>
<code>
launchctl load Library/LaunchAgents/com.rousette.tracks.plist
</code>
</pre>

or

<pre>
<code>
launchctl unload Library/LaunchAgents/com.rousette.tracks.plist
</code>
</pre>

to unload it. It seems that unloading the script doesn't actually stop the server, so if you want to stop it, you'll have to find the process ID and use that to kill it:

<pre>
<code>
ps ax | grep -i "ruby script/server" | grep -v grep | awk '{print $1}'
</code>
</pre>

then note the number you get back (let's say it's 1283)

<pre>
<code>
kill 1283
</code>
</pre>

This method starts the server at user login, and doesn't restart the server if it crashes or is stopped for some other reason. If you want to start the server when the computer boots, put the plist file in the root level Library folder (i.e. <code>/Library/LaunchAgents</code>), and put the <code>start_tracks</code> file in somewhere like <code>/usr/local/bin</code>. If you want the server to re-launch automatically when it gets killed, take a look at the manpage for launchd.plist. I think that it would probably work if you replace the <code>RunAtLoad</code> parameter with <code>OnDemand</code>, which should be set to false -- but I haven't tested that.

This method has started up WEBrick, but you could easily adapt it by replacing the command starting WEBrick in <code>start_tracks</code> with one starting lighttpd. 
